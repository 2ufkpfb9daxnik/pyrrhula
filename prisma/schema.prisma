generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema", "referentialIntegrity"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["auth", "public"]
}

model User {
  id                                   String                   @id @map("user_id") @db.VarChar(16)
  username                             String                   @unique @db.VarChar(32)
  password                             String
  icon                                 String?
  isAdmin                              Boolean                  @default(false)
  createdAt                            DateTime                 @default(now())
  profile                              String?
  followersCount                       Int                      @default(0)
  followingCount                       Int                      @default(0)
  rate                                 Int                      @default(0)
  postCount                            Int                      @default(0)
  AnonymousQuestionToken               AnonymousQuestionToken[]
  blockedBy                            Block[]                  @relation("BlockedBy")
  blocking                             Block[]                  @relation("Blocking")
  receivedChats                        Chat[]                   @relation("ChatReceiver")
  sentChats                            Chat[]                   @relation("ChatSender")
  chatRooms                            ChatRoomParticipant[]
  favoritePosts                        Favorite[]               @relation("UserFavorites")
  followers                            Follow[]                 @relation("Followers")
  follows                              Follow[]                 @relation("Following")
  groupChatMemberships                 GroupChatMember[]
  groupMessages                        GroupMessage[]
  mutedBy                              Mute[]                   @relation("MutedBy")
  muting                               Mute[]                   @relation("Muting")
  receivedNotifications                Notification[]           @relation("NotificationReceiver")
  sentNotifications                    Notification[]           @relation("NotificationSender")
  posts                                Post[]
  Question_Question_senderIdToUser     Question[]               @relation("Question_senderIdToUser")
  Question_Question_targetUserIdToUser Question[]               @relation("Question_targetUserIdToUser")
  repostedPosts                        Repost[]                 @relation("UserReposts")
  list_followers                       list_followers[]
  list_members                         list_members[]
  lists                                lists[]
  repliedPosts                         Post[]                   @relation("UserReplies")

  @@schema("public")
}

model RatingHistory {
  id        String   @id @default(uuid())
  userId    String
  delta     Int
  rating    Int
  createdAt DateTime @default(now())
  reason    String?
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([createdAt])
  @@schema("public")
}

model Post {
  id               String         @id @default(uuid())
  userId           String
  content          String
  createdAt        DateTime       @default(now())
  favorites        Int            @default(0)
  reposts          Int            @default(0)
  parentId         String?
  images           String[]       @default([]) @db.VarChar
  repostedByUserId String?        @db.Uuid
  list_id          String?        @db.Uuid
  favoritedBy      Favorite[]
  notifications    Notification[]
  parent           Post?          @relation("Replies", fields: [parentId], references: [id])
  replies          Post[]         @relation("Replies")
  users            users?         @relation(fields: [repostedByUserId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user             User           @relation(fields: [userId], references: [id])
  lists            lists?         @relation(fields: [list_id], references: [id], onUpdate: NoAction, map: "fk_post_list")
  Question         Question[]
  repostedBy       Repost[]
  repliedBy        User[]         @relation("UserReplies")

  @@index([userId])
  @@index([parentId])
  @@index([repostedByUserId])
  @@index([list_id], map: "idx_posts_list")
  @@schema("public")
}

model Follow {
  id         String   @id @default(uuid())
  followerId String
  followedId String
  createdAt  DateTime @default(now())
  followed   User     @relation("Followers", fields: [followedId], references: [id])
  follower   User     @relation("Following", fields: [followerId], references: [id])

  @@unique([followerId, followedId])
  @@schema("public")
}

model ChatRoom {
  id           String                @id @default(cuid())
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  messages     Chat[]
  participants ChatRoomParticipant[]

  @@schema("public")
}

model ChatRoomParticipant {
  userId     String
  chatRoomId String
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@id([userId, chatRoomId])
  @@schema("public")
}

model Chat {
  id            String         @id @default(cuid())
  senderId      String         @db.VarChar(16)
  receiverId    String         @db.VarChar(16)
  message       String
  createdAt     DateTime       @default(now())
  isDeleted     Boolean        @default(false)
  chatRoomId    String
  chatRoom      ChatRoom       @relation(fields: [chatRoomId], references: [id])
  receiver      User           @relation("ChatReceiver", fields: [receiverId], references: [id])
  sender        User           @relation("ChatSender", fields: [senderId], references: [id])
  notifications Notification[]

  @@index([chatRoomId])
  @@index([senderId])
  @@index([receiverId])
  @@schema("public")
}

model Notification {
  id                     String                  @id @default(cuid())
  receiverId             String                  @db.VarChar(16)
  senderId               String?                 @db.VarChar(16)
  type                   String                  @db.VarChar(20)
  relatedPostId          String?
  createdAt              DateTime                @default(now())
  chatId                 String?
  isRead                 Boolean                 @default(false)
  anonymousTokenId       String?                 @db.Uuid
  list_id                String?                 @db.Uuid
  AnonymousQuestionToken AnonymousQuestionToken? @relation(fields: [anonymousTokenId], references: [id], onUpdate: NoAction)
  Chat                   Chat?                   @relation(fields: [chatId], references: [id])
  receiver               User                    @relation("NotificationReceiver", fields: [receiverId], references: [id])
  post                   Post?                   @relation(fields: [relatedPostId], references: [id])
  sender                 User?                   @relation("NotificationSender", fields: [senderId], references: [id])
  lists                  lists?                  @relation(fields: [list_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_notification_list")

  @@index([receiverId])
  @@index([senderId])
  @@index([isRead])
  @@index([anonymousTokenId])
  @@index([relatedPostId])
  @@index([type])
  @@index([list_id], map: "idx_notification_list")
  @@schema("public")
}

model Favorite {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation("UserFavorites", fields: [userId], references: [id])

  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
  @@schema("public")
}

model Repost {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation("UserReposts", fields: [userId], references: [id])

  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
  @@schema("public")
}

model Block {
  id        String   @id @default(uuid())
  blockerId String
  blockedId String
  createdAt DateTime @default(now())
  blocked   User     @relation("BlockedBy", fields: [blockedId], references: [id])
  blocker   User     @relation("Blocking", fields: [blockerId], references: [id])

  @@unique([blockerId, blockedId])
  @@index([blockerId])
  @@index([blockedId])
  @@schema("public")
}

model Mute {
  id        String   @id @default(uuid())
  muterId   String
  mutedId   String
  createdAt DateTime @default(now())
  muted     User     @relation("MutedBy", fields: [mutedId], references: [id])
  muter     User     @relation("Muting", fields: [muterId], references: [id])

  @@unique([muterId, mutedId])
  @@index([muterId])
  @@index([mutedId])
  @@schema("public")
}

model GroupChat {
  id        String            @id @default(dbgenerated("gen_random_uuid()"))
  name      String
  createdAt DateTime?         @default(now()) @db.Timestamptz(6)
  updatedAt DateTime?         @default(now()) @db.Timestamptz(6)
  members   GroupChatMember[]
  messages  GroupMessage[]

  @@schema("public")
}

model GroupChatMember {
  id          String    @id @default(dbgenerated("gen_random_uuid()"))
  groupChatId String
  userId      String
  joinedAt    DateTime? @default(now()) @db.Timestamptz(6)
  groupChat   GroupChat @relation(fields: [groupChatId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([groupChatId, userId])
  @@schema("public")
}

model GroupMessage {
  id          String    @id @default(dbgenerated("gen_random_uuid()"))
  content     String
  createdAt   DateTime? @default(now()) @db.Timestamptz(6)
  groupChatId String
  senderId    String
  groupChat   GroupChat @relation(fields: [groupChatId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  sender      User      @relation(fields: [senderId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("public")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model audit_log_entries {
  instance_id String?   @db.Uuid
  id          String    @id @db.Uuid
  payload     Json?     @db.Json
  created_at  DateTime? @db.Timestamptz(6)
  ip_address  String    @default("") @db.VarChar(64)

  @@index([instance_id], map: "audit_logs_instance_id_idx")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model flow_state {
  id                     String                @id @db.Uuid
  user_id                String?               @db.Uuid
  auth_code              String
  code_challenge_method  code_challenge_method
  code_challenge         String
  provider_type          String
  provider_access_token  String?
  provider_refresh_token String?
  created_at             DateTime?             @db.Timestamptz(6)
  updated_at             DateTime?             @db.Timestamptz(6)
  authentication_method  String
  auth_code_issued_at    DateTime?             @db.Timestamptz(6)
  saml_relay_states      saml_relay_states[]

  @@index([created_at(sort: Desc)])
  @@index([auth_code], map: "idx_auth_code")
  @@index([user_id, authentication_method], map: "idx_user_id_auth_method")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model identities {
  provider_id     String
  user_id         String    @db.Uuid
  identity_data   Json
  provider        String
  last_sign_in_at DateTime? @db.Timestamptz(6)
  created_at      DateTime? @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)
  email           String?   @default(dbgenerated("lower((identity_data ->> 'email'::text))"))
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  users           users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider_id, provider], map: "identities_provider_id_provider_unique")
  @@index([email])
  @@index([user_id])
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model instances {
  id              String    @id @db.Uuid
  uuid            String?   @db.Uuid
  raw_base_config String?
  created_at      DateTime? @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)

  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model mfa_amr_claims {
  session_id            String   @db.Uuid
  created_at            DateTime @db.Timestamptz(6)
  updated_at            DateTime @db.Timestamptz(6)
  authentication_method String
  id                    String   @id(map: "amr_id_pk") @db.Uuid
  sessions              sessions @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([session_id, authentication_method], map: "mfa_amr_claims_session_id_authentication_method_pkey")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model mfa_challenges {
  id                     String      @id @db.Uuid
  factor_id              String      @db.Uuid
  created_at             DateTime    @db.Timestamptz(6)
  verified_at            DateTime?   @db.Timestamptz(6)
  ip_address             String      @db.Inet
  otp_code               String?
  web_authn_session_data Json?
  mfa_factors            mfa_factors @relation(fields: [factor_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "mfa_challenges_auth_factor_id_fkey")

  @@index([created_at(sort: Desc)], map: "mfa_challenge_created_at_idx")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model mfa_factors {
  id                   String           @id @db.Uuid
  user_id              String           @db.Uuid
  friendly_name        String?
  factor_type          factor_type
  status               factor_status
  created_at           DateTime         @db.Timestamptz(6)
  updated_at           DateTime         @db.Timestamptz(6)
  secret               String?
  phone                String?
  last_challenged_at   DateTime?        @unique @db.Timestamptz(6)
  web_authn_credential Json?
  web_authn_aaguid     String?          @db.Uuid
  mfa_challenges       mfa_challenges[]
  users                users            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, phone], map: "unique_phone_factor_per_user")
  @@index([user_id, created_at], map: "factor_id_created_at_idx")
  @@index([user_id])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model one_time_tokens {
  id         String              @id @db.Uuid
  user_id    String              @db.Uuid
  token_type one_time_token_type
  token_hash String
  relates_to String
  created_at DateTime            @default(now()) @db.Timestamp(6)
  updated_at DateTime            @default(now()) @db.Timestamp(6)
  users      users               @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, token_type])
  @@index([relates_to], map: "one_time_tokens_relates_to_hash_idx", type: Hash)
  @@index([token_hash], map: "one_time_tokens_token_hash_hash_idx", type: Hash)
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model refresh_tokens {
  instance_id String?   @db.Uuid
  id          BigInt    @id @default(autoincrement())
  token       String?   @unique(map: "refresh_tokens_token_unique") @db.VarChar(255)
  user_id     String?   @db.VarChar(255)
  revoked     Boolean?
  created_at  DateTime? @db.Timestamptz(6)
  updated_at  DateTime? @db.Timestamptz(6)
  parent      String?   @db.VarChar(255)
  session_id  String?   @db.Uuid
  sessions    sessions? @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([instance_id])
  @@index([instance_id, user_id])
  @@index([parent])
  @@index([session_id, revoked])
  @@index([updated_at(sort: Desc)])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model saml_providers {
  id                String        @id @db.Uuid
  sso_provider_id   String        @db.Uuid
  entity_id         String        @unique
  metadata_xml      String
  metadata_url      String?
  attribute_mapping Json?
  created_at        DateTime?     @db.Timestamptz(6)
  updated_at        DateTime?     @db.Timestamptz(6)
  name_id_format    String?
  sso_providers     sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([sso_provider_id])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model saml_relay_states {
  id              String        @id @db.Uuid
  sso_provider_id String        @db.Uuid
  request_id      String
  for_email       String?
  redirect_to     String?
  created_at      DateTime?     @db.Timestamptz(6)
  updated_at      DateTime?     @db.Timestamptz(6)
  flow_state_id   String?       @db.Uuid
  flow_state      flow_state?   @relation(fields: [flow_state_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  sso_providers   sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([created_at(sort: Desc)])
  @@index([for_email])
  @@index([sso_provider_id])
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model schema_migrations {
  version String @id @db.VarChar(255)

  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model sessions {
  id             String           @id @db.Uuid
  user_id        String           @db.Uuid
  created_at     DateTime?        @db.Timestamptz(6)
  updated_at     DateTime?        @db.Timestamptz(6)
  factor_id      String?          @db.Uuid
  aal            aal_level?
  not_after      DateTime?        @db.Timestamptz(6)
  refreshed_at   DateTime?        @db.Timestamp(6)
  user_agent     String?
  ip             String?          @db.Inet
  tag            String?
  mfa_amr_claims mfa_amr_claims[]
  refresh_tokens refresh_tokens[]
  users          users            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([not_after(sort: Desc)])
  @@index([user_id])
  @@index([user_id, created_at], map: "user_id_created_at_idx")
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model sso_domains {
  id              String        @id @db.Uuid
  sso_provider_id String        @db.Uuid
  domain          String
  created_at      DateTime?     @db.Timestamptz(6)
  updated_at      DateTime?     @db.Timestamptz(6)
  sso_providers   sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([sso_provider_id])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model sso_providers {
  id                String              @id @db.Uuid
  resource_id       String?
  created_at        DateTime?           @db.Timestamptz(6)
  updated_at        DateTime?           @db.Timestamptz(6)
  saml_providers    saml_providers[]
  saml_relay_states saml_relay_states[]
  sso_domains       sso_domains[]

  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model users {
  instance_id                 String?           @db.Uuid
  id                          String            @id @db.Uuid
  aud                         String?           @db.VarChar(255)
  role                        String?           @db.VarChar(255)
  email                       String?           @db.VarChar(255)
  encrypted_password          String?           @db.VarChar(255)
  email_confirmed_at          DateTime?         @db.Timestamptz(6)
  invited_at                  DateTime?         @db.Timestamptz(6)
  confirmation_token          String?           @db.VarChar(255)
  confirmation_sent_at        DateTime?         @db.Timestamptz(6)
  recovery_token              String?           @db.VarChar(255)
  recovery_sent_at            DateTime?         @db.Timestamptz(6)
  email_change_token_new      String?           @db.VarChar(255)
  email_change                String?           @db.VarChar(255)
  email_change_sent_at        DateTime?         @db.Timestamptz(6)
  last_sign_in_at             DateTime?         @db.Timestamptz(6)
  raw_app_meta_data           Json?
  raw_user_meta_data          Json?
  is_super_admin              Boolean?
  created_at                  DateTime?         @db.Timestamptz(6)
  updated_at                  DateTime?         @db.Timestamptz(6)
  phone                       String?           @unique
  phone_confirmed_at          DateTime?         @db.Timestamptz(6)
  phone_change                String?           @default("")
  phone_change_token          String?           @default("") @db.VarChar(255)
  phone_change_sent_at        DateTime?         @db.Timestamptz(6)
  confirmed_at                DateTime?         @default(dbgenerated("LEAST(email_confirmed_at, phone_confirmed_at)")) @db.Timestamptz(6)
  email_change_token_current  String?           @default("") @db.VarChar(255)
  email_change_confirm_status Int?              @default(0) @db.SmallInt
  banned_until                DateTime?         @db.Timestamptz(6)
  reauthentication_token      String?           @default("") @db.VarChar(255)
  reauthentication_sent_at    DateTime?         @db.Timestamptz(6)
  is_sso_user                 Boolean           @default(false)
  deleted_at                  DateTime?         @db.Timestamptz(6)
  is_anonymous                Boolean           @default(false)
  identities                  identities[]
  mfa_factors                 mfa_factors[]
  one_time_tokens             one_time_tokens[]
  sessions                    sessions[]
  Post                        Post[]
  rating_history              rating_history[]

  @@index([instance_id])
  @@index([is_anonymous])
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Question {
  id                               String                   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  senderId                         String                   @db.VarChar(16)
  targetUserId                     String                   @db.VarChar(16)
  question                         String
  answer                           String?
  createdAt                        DateTime                 @default(now()) @db.Timestamptz(6)
  answeredAt                       DateTime?                @db.Timestamptz(6)
  isPublished                      Boolean                  @default(true)
  relatedPostId                    String?
  status                           String                   @default("pending") @db.VarChar(10)
  isAnonymous                      Boolean                  @default(false)
  AnonymousQuestionToken           AnonymousQuestionToken[]
  Post                             Post?                    @relation(fields: [relatedPostId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User_Question_senderIdToUser     User                     @relation("Question_senderIdToUser", fields: [senderId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  User_Question_targetUserIdToUser User                     @relation("Question_targetUserIdToUser", fields: [targetUserId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([createdAt(sort: Desc)])
  @@index([isPublished])
  @@index([senderId])
  @@index([status])
  @@index([targetUserId])
  @@schema("public")
}

model AnonymousQuestionToken {
  id           String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  questionId   String         @db.Uuid
  userId       String         @db.VarChar(16)
  createdAt    DateTime       @default(now()) @db.Timestamptz(6)
  expiresAt    DateTime       @default(dbgenerated("(now() + '90 days'::interval)")) @db.Timestamptz(6)
  Question     Question       @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  User         User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Notification Notification[]

  @@index([questionId])
  @@index([userId])
  @@schema("public")
}

model list_followers {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  list_id    String    @db.Uuid
  user_id    String    @db.VarChar(16)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  lists      lists     @relation(fields: [list_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_list")
  User       User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")

  @@unique([list_id, user_id])
  @@index([list_id], map: "idx_list_followers_list")
  @@index([user_id], map: "idx_list_followers_user")
  @@schema("public")
}

model list_members {
  id        String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  list_id   String    @db.Uuid
  user_id   String    @db.VarChar(16)
  is_admin  Boolean?  @default(false)
  status    String?   @default("pending") @db.VarChar(10)
  joined_at DateTime? @default(now()) @db.Timestamptz(6)
  lists     lists     @relation(fields: [list_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_list")
  User      User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")

  @@unique([list_id, user_id])
  @@index([list_id], map: "idx_list_members_list")
  @@index([status], map: "idx_list_members_status")
  @@index([user_id], map: "idx_list_members_user")
  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model lists {
  id                     String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                   String           @db.VarChar(50)
  description            String?
  creator_id             String           @db.VarChar(16)
  is_managed             Boolean?         @default(false)
  include_timeline_posts Boolean?         @default(false)
  created_at             DateTime?        @default(now()) @db.Timestamptz(6)
  Notification           Notification[]
  Post                   Post[]
  list_followers         list_followers[]
  list_members           list_members[]
  User                   User             @relation(fields: [creator_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_creator")

  @@index([creator_id], map: "idx_lists_creator")
  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model rating_history {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String    @db.Uuid
  delta      Int
  rating     Int
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  reason     String?
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([created_at])
  @@index([user_id])
  @@schema("public")
}

enum aal_level {
  aal1
  aal2
  aal3

  @@schema("auth")
}

enum code_challenge_method {
  s256
  plain

  @@schema("auth")
}

enum factor_status {
  unverified
  verified

  @@schema("auth")
}

enum factor_type {
  totp
  webauthn
  phone

  @@schema("auth")
}

enum one_time_token_type {
  confirmation_token
  reauthentication_token
  recovery_token
  email_change_token_new
  email_change_token_current
  phone_change_token

  @@schema("auth")
}
