// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// このファイルを更新したら...
// 0. `npm run dev` や `npx prisma studio` を停止
// 1. dev.db を削除
// 2. npx prisma db push
// 3. npx prisma generate
// 4. npx prisma db seed

//本番運用の開始後は npx prisma migrate という「既存レコードを残したままスキーマを変更するコマンド」を使用してください

//本番環境に移行する前： npx prisma migrate dev --name init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @map("user_id") @db.VarChar(16) // ユーザー ID（最大 16 文字）
  username  String   @unique @db.VarChar(32) // 表示名（最大 32 文字）
  password  String   // ハッシュ化されたパスワード
  icon      String?  // アイコン（URL または NULL）
  isAdmin   Boolean  @default(false) // 管理者フラグ
  createdAt DateTime @default(now()) // アカウント作成日時

  // レート関連
  rate      Int      @default(0)     // レート（投稿数と100投稿の速度で判定）
  postCount Int      @default(0)     // 総投稿数

  // 投稿関連
  posts     Post[]

  // フォロー関連
  follows   Follow[] @relation("Following")
  followers Follow[] @relation("Followers")

  // お気に入り・拡散関連
  favorites Favorite[]
  reposts   Repost[]

  // チャット関連
  sentChats     Chat[] @relation("ChatSender")
  receivedChats Chat[] @relation("ChatReceiver")
  
  // 通知関連
  receivedNotifications Notification[] @relation("NotificationReceiver")
  sentNotifications    Notification[] @relation("NotificationSender")
}

model Post {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  content   String
  createdAt DateTime @default(now())
  favorites Int      @default(0)
  reposts   Int      @default(0)
  parentId  String?  // 返信元の投稿
  parent    Post?    @relation("Replies", fields: [parentId], references: [id])
  replies   Post[]   @relation("Replies")

  // お気に入り・拡散の関連を追加
  favoritedBy Favorite[] // 誰にお気に入りされたか
  repostedBy  Repost[]   // 誰に拡散されたか
}

model Follow {
  id         String @id @default(uuid())
  follower   User   @relation(fields: [followerId], references: [id], name: "Following")
  followerId String
  followed   User   @relation(fields: [followedId], references: [id], name: "Followers")
  followedId String
  createdAt  DateTime @default(now())

  @@unique([followerId, followedId])
}

model Chat {
  id          String   @id @default(cuid()) // ユニークなメッセージ ID
  senderId    String   @db.VarChar(16) // 送信者のユーザー ID
  receiverId  String   @db.VarChar(16) // 受信者のユーザー ID
  message     String   // メッセージ内容（テキストのみ）
  createdAt   DateTime @default(now()) // 送信日時
  isDeleted   Boolean  @default(false) // 削除フラグ（admin のみ変更可）

  sender      User     @relation("ChatSender", fields: [senderId], references: [id])
  receiver    User     @relation("ChatReceiver", fields: [receiverId], references: [id])

  @@index([senderId])
  @@index([receiverId])
}

model Notification {
  id            String   @id @default(cuid())
  receiverId    String   @db.VarChar(16)
  senderId      String?  @db.VarChar(16)
  type          String   @db.VarChar(8)   // さらに短く制限
  relatedPostId String?  
  createdAt     DateTime @default(now())

  receiver      User     @relation("NotificationReceiver", fields: [receiverId], references: [id])
  sender        User?    @relation("NotificationSender", fields: [senderId], references: [id])

  @@index([receiverId])
  @@index([senderId])
}

// お気に入りの中間テーブル
model Favorite {
  id        String   @id @default(uuid())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())

  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
}

// 拡散の中間テーブル
model Repost {
  id        String   @id @default(uuid())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())

  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
}
