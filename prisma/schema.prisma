generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    String                @id @map("user_id") @db.VarChar(16)
  username              String                @unique @db.VarChar(32)
  password              String
  icon                  String?
  isAdmin               Boolean               @default(false)
  createdAt             DateTime              @default(now())
  profile               String?
  followersCount        Int                   @default(0)
  followingCount        Int                   @default(0)
  rate                  Int                   @default(0)
  postCount             Int                   @default(0)
  blockedBy             Block[]               @relation("BlockedBy")
  blocking              Block[]               @relation("Blocking")
  receivedChats         Chat[]                @relation("ChatReceiver")
  sentChats             Chat[]                @relation("ChatSender")
  chatRooms             ChatRoomParticipant[]
  favoritePosts         Favorite[]            @relation("UserFavorites")
  followers             Follow[]              @relation("Followers")
  follows               Follow[]              @relation("Following")
  groupChatMemberships  GroupChatMember[]
  groupMessages         GroupMessage[]
  mutedBy               Mute[]                @relation("MutedBy")
  muting                Mute[]                @relation("Muting")
  receivedNotifications Notification[]        @relation("NotificationReceiver")
  sentNotifications     Notification[]        @relation("NotificationSender")
  posts                 Post[]
  repostedPosts         Repost[]              @relation("UserReposts")
  repliedPosts          Post[]                @relation("UserReplies")
}

model Post {
  id            String         @id @default(uuid())
  userId        String
  content       String
  createdAt     DateTime       @default(now())
  favorites     Int            @default(0)
  reposts       Int            @default(0)
  parentId      String?
  images        String[]       @default([]) @db.VarChar
  favoritedBy   Favorite[]
  notifications Notification[]
  parent        Post?          @relation("Replies", fields: [parentId], references: [id])
  replies       Post[]         @relation("Replies")
  user          User           @relation(fields: [userId], references: [id])
  repostedBy    Repost[]
  repliedBy     User[]         @relation("UserReplies")

  @@index([userId])
  @@index([parentId])
}

model Follow {
  id         String   @id @default(uuid())
  followerId String
  followedId String
  createdAt  DateTime @default(now())
  followed   User     @relation("Followers", fields: [followedId], references: [id])
  follower   User     @relation("Following", fields: [followerId], references: [id])

  @@unique([followerId, followedId])
}

model ChatRoom {
  id           String                @id @default(cuid())
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  messages     Chat[]
  participants ChatRoomParticipant[]
}

model ChatRoomParticipant {
  userId     String
  chatRoomId String
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@id([userId, chatRoomId])
}

model Chat {
  id            String         @id @default(cuid())
  senderId      String         @db.VarChar(16)
  receiverId    String         @db.VarChar(16)
  message       String
  createdAt     DateTime       @default(now())
  isDeleted     Boolean        @default(false)
  chatRoomId    String
  chatRoom      ChatRoom       @relation(fields: [chatRoomId], references: [id])
  receiver      User           @relation("ChatReceiver", fields: [receiverId], references: [id])
  sender        User           @relation("ChatSender", fields: [senderId], references: [id])
  notifications Notification[]

  @@index([chatRoomId])
  @@index([senderId])
  @@index([receiverId])
}

model Notification {
  id            String   @id @default(cuid())
  receiverId    String   @db.VarChar(16)
  senderId      String?  @db.VarChar(16)
  type          String   @db.VarChar(8)
  relatedPostId String?
  createdAt     DateTime @default(now())
  chatId        String?
  Chat          Chat?    @relation(fields: [chatId], references: [id])
  receiver      User     @relation("NotificationReceiver", fields: [receiverId], references: [id])
  post          Post?    @relation(fields: [relatedPostId], references: [id])
  sender        User?    @relation("NotificationSender", fields: [senderId], references: [id])

  @@index([receiverId])
  @@index([senderId])
}

model Favorite {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation("UserFavorites", fields: [userId], references: [id])

  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
}

model Repost {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation("UserReposts", fields: [userId], references: [id])

  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
}

model Block {
  id        String   @id @default(uuid())
  blockerId String
  blockedId String
  createdAt DateTime @default(now())
  blocked   User     @relation("BlockedBy", fields: [blockedId], references: [id])
  blocker   User     @relation("Blocking", fields: [blockerId], references: [id])

  @@unique([blockerId, blockedId])
  @@index([blockerId])
  @@index([blockedId])
}

model Mute {
  id        String   @id @default(uuid())
  muterId   String
  mutedId   String
  createdAt DateTime @default(now())
  muted     User     @relation("MutedBy", fields: [mutedId], references: [id])
  muter     User     @relation("Muting", fields: [muterId], references: [id])

  @@unique([muterId, mutedId])
  @@index([muterId])
  @@index([mutedId])
}

model GroupChat {
  id        String            @id @default(dbgenerated("gen_random_uuid()"))
  name      String
  createdAt DateTime?         @default(now()) @db.Timestamptz(6)
  updatedAt DateTime?         @default(now()) @db.Timestamptz(6)
  members   GroupChatMember[]
  messages  GroupMessage[]
}

model GroupChatMember {
  id          String    @id @default(dbgenerated("gen_random_uuid()"))
  groupChatId String
  userId      String
  joinedAt    DateTime? @default(now()) @db.Timestamptz(6)
  groupChat   GroupChat @relation(fields: [groupChatId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([groupChatId, userId])
}

model GroupMessage {
  id          String    @id @default(dbgenerated("gen_random_uuid()"))
  content     String
  createdAt   DateTime? @default(now()) @db.Timestamptz(6)
  groupChatId String
  senderId    String
  groupChat   GroupChat @relation(fields: [groupChatId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  sender      User      @relation(fields: [senderId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
